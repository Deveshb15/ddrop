{"version":3,"sources":["serviceWorker.js","index.js","components/App.js","components/Navbar.js","logo.png","components/Main.js","components/Table.js","components/helpers.js"],"names":["Boolean","window","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","ipfs","require","ipfsClient","host","port","protocol","props","captureFile","event","preventDefault","file","target","files","reader","FileReader","readAsArrayBuffer","onloadend","setState","buffer","Buffer","result","type","name","console","log","state","uploadFile","description","add","error","loading","ddrop","methods","hash","size","send","from","account","on","reload","e","alert","a","this","loadWeb3","loadBlockchainData","ethereum","web3","Web3","enable","currentProvider","eth","getAccounts","accounts","net","getId","networkId","networkData","DDrop","networks","Contract","abi","address","fileCount","call","filesCount","i","id","className","length","Component","Navbar","src","logo","alt","rel","href","substring","Identicon","toString","module","exports","Main","style","width","onSubmit","fileDescription","value","ref","input","placeholder","autoComplete","required","onChange","Table","scope","map","key","fileId","fileName","fileType","bytes","parseInt","Math","floor","round","pow","convertBytes","fileSize","moment","unix","uploadTime","format","uploader","fileHash"],"mappings":"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","file":"static/js/main.26645bab.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css'\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import React, { Component } from 'react';\r\nimport Navbar from './Navbar'\r\nimport Main from './Main'\r\nimport Table from './Table'\r\n\r\nimport Web3 from 'web3';\r\nimport './App.css';\r\nimport DDrop from '../abis/DDrop.json' \r\n\r\n//Declare IPFS\r\nconst ipfsClient = require('ipfs-http-client')\r\nconst ipfs = ipfsClient({ host: 'ipfs.infura.io', port: 5001, protocol:'https' })\r\n\r\nclass App extends Component {\r\n\r\n  async componentWillMount() {\r\n    await this.loadWeb3()\r\n    await this.loadBlockchainData()\r\n  }\r\n\r\n  async loadWeb3() {\r\n    //Setting up Web3\r\n    if(window.ethereum){\r\n      window.web3 = new Web3(window.ethereum)\r\n      await window.ethereum.enable()\r\n    }\r\n    else if(window.web3) {\r\n      window.web3 = new Web3(window.web3.currentProvider)\r\n    }\r\n    else{\r\n      window.alert(\"Non-Ethereum browser detected. You should consider trying metamask\")\r\n    }\r\n  }\r\n\r\n  async loadBlockchainData() {\r\n    //Declare Web3\r\n    const web3 = window.web3\r\n\r\n    //Load account\r\n    const accounts = await web3.eth.getAccounts()\r\n    this.setState({ account: accounts[0] })\r\n\r\n    //Network ID\r\n    const networkId = await web3.eth.net.getId()\r\n    const networkData = DDrop.networks[networkId]\r\n    //IF got connection, get data from contracts\r\n    if(networkData){\r\n      //Assign contract\r\n      const ddrop = new web3.eth.Contract(DDrop.abi, networkData.address)\r\n      this.setState({ ddrop })\r\n      //Get files amount\r\n      const filesCount = await ddrop.methods.fileCount().call()\r\n      this.setState({ filesCount })\r\n      //Load files&sort by the newest\r\n      for(let i = filesCount; i>=1; i--){\r\n        const file = await ddrop.methods.files(i).call()\r\n        this.setState({\r\n          files: [...this.state.files, file]\r\n        })\r\n      }\r\n    } else {\r\n      //Else\r\n      //alert Error\r\n      window.alert(\"DDrop contract not deployed to detected network\")\r\n    }\r\n      this.setState({ loading: false })\r\n  }\r\n\r\n  // Get file from user\r\n  captureFile = event => {\r\n    event.preventDefault()\r\n\r\n    const file = event.target.files[0];\r\n    const reader = new window.FileReader()\r\n\r\n    reader.readAsArrayBuffer(file)\r\n    reader.onloadend = () => {\r\n      this.setState({\r\n        buffer: Buffer(reader.result),\r\n        type: file.type,\r\n        name: file.name\r\n      })\r\n      console.log('buffer', this.state.buffer)\r\n    }\r\n  }\r\n\r\n\r\n  //Upload File\r\n  uploadFile = description => {\r\n    console.log(\"Submitting files to IPFS\");\r\n    \r\n    //Add file to the IPFS\r\n    ipfs.add(this.state.buffer, (error, result) => {\r\n      console.log('IPFS result', result);\r\n      //Check If error\r\n      if(error){\r\n        console.log(error)\r\n        //Return error\r\n        return\r\n      }\r\n      //Set state to loading\r\n      this.setState({ loading: true })\r\n\r\n      //Assign value for the file without extension\r\n      if(this.state.type === '') {\r\n        this.setState({ type: 'none' })\r\n      }\r\n\r\n      //Call smart contract uploadFile function \r\n      this.state.ddrop.methods.uploadFile(result[0].hash, result[0].size, this.state.type, this.state.name, description).send({ from: this.state.account }).on('transactionHash', (hash) => {\r\n        this.setState({\r\n          loading: false,\r\n          type: null,\r\n          name: null\r\n        })\r\n        window.location.reload()\r\n      }).on('error', (e) => {\r\n        window.alert('Error uploading file, Please try again')\r\n        this.setState({ loading: false})\r\n      })\r\n    })\r\n\r\n\r\n  }\r\n\r\n  //Set states\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      loading: false,\r\n      ddrop: null,\r\n      type: null,\r\n      name: null,\r\n      account: '',\r\n      files: []\r\n    }\r\n\r\n    //Bind functions\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Navbar account={this.state.account} />\r\n        { this.state.loading\r\n          ? <div id=\"loader\" className=\"text-center mt-5\"><p>Loading...</p></div>\r\n          : <>\r\n            <Main\r\n                files={this.state.files}\r\n                captureFile={this.captureFile}\r\n                uploadFile={this.uploadFile}\r\n              />\r\n            {(this.state.files.length !== 0) ? <Table files={this.state.files} /> : <span></span>}\r\n            </>\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","import React, { Component } from 'react';\r\nimport Identicon from 'identicon.js';\r\nimport logo from '../logo.png'\r\n\r\nclass Navbar extends Component {\r\n  \r\n  render() {\r\n    return (\r\n      <nav className=\"bg-white relative\">\r\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\r\n          <div className=\"flex items-center justify-between h-16\">\r\n              <div className=\"flex items-center justify-center border-b-2 border-gray-100 py-6 sm:items-stretch sm:justify-start\">\r\n                <div className=\"flex-shrink-0 flex items-center\">\r\n                  <img src={logo} className=\"block h-8 w-auto\" alt=\"\" />\r\n                </div>\r\n              </div>\r\n              <div>\r\n                <h1 className=\"font-extrabold text-4xl ml-24 text-transparent bg-clip-text bg-gradient-to-br from-indigo-400 to-green-400\">DDrop</h1>\r\n              </div>\r\n              <div className=\"relative\">\r\n                { this.props.account\r\n                  ? <div className=\"flex\">\r\n                    <small className=\"mr-2 mt-2 underline\" id=\"account\">\r\n                      <a target=\"_blank\"\r\n                        alt=\"\"\r\n                        className=\"text-black font-bold\"\r\n                        rel=\"noopener noreferrer\"\r\n                        href={\"https://etherscan.io/address/\" + this.props.account}>\r\n                        {this.props.account.substring(0,6)}...{this.props.account.substring(38,42)}\r\n                      </a>\r\n                    </small>\r\n                    <img\r\n                      alt=\"\"\r\n                      className='h-8 w-8 '\r\n                      src={`data:image/png;base64,${new Identicon(this.props.account, 30).toString()}`}\r\n                    />\r\n                  </div>\r\n                  : <span></span>\r\n                }\r\n              </div>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Navbar;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n{/* <a\r\n          className=\"navbar-brand col-sm-3 col-md-2 mr-0\"\r\n          href=\"http://www.dappuniversity.com/bootcamp\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          <img src={box} width=\"30\" height=\"30\" className=\"align-top\" alt=\"\" />\r\n          DDrop\r\n        </a>\r\n        <ul className=\"navbar-nav px-3\">\r\n        <li>\r\n            <small id=\"account\">\r\n              <a target=\"_blank\"\r\n                 alt=\"\"\r\n                 className=\"text-white\"\r\n                 rel=\"noopener noreferrer\"\r\n                 href={\"https://etherscan.io/address/\" + this.props.account}>\r\n                {this.props.account.substring(0,6)}...{this.props.account.substring(38,42)}\r\n              </a>\r\n            </small>\r\n            { this.props.account\r\n              ? <img\r\n                  alt=\"\"\r\n                  className='ml-2'\r\n                  width='30'\r\n                  height='30'\r\n                  src={`data:image/png;base64,${new Identicon(this.props.account, 30).toString()}`}\r\n                />\r\n              : <span></span>\r\n            }\r\n          </li>\r\n        </ul> */}","module.exports = __webpack_public_path__ + \"static/media/logo.23ce584d.png\";","import React, { Component } from 'react';\r\n\r\nclass Main extends Component {\r\n\r\n  render() {\r\n    return (\r\n     <div>\r\n\r\n       {/* Share File */}\r\n        <div className=\"bg-white flex justify-center items-center mt-12 sm:rounded-lg\">\r\n        <div className=\"shadow-lg\" style={{width: '28rem'}}>\r\n          <div className=\"px-4 py-5 sm:px-6\">\r\n            <h1 className=\"text-2xl text-center leading-6 underline font-bold text-indigo-600\">\r\n              Share File\r\n            </h1>\r\n          </div>\r\n            <hr />\r\n          <div className=\"mb-8 mt-6\">\r\n            <form onSubmit={(event) => {\r\n                  event.preventDefault()\r\n                  const description = this.fileDescription.value\r\n                  this.props.uploadFile(description)\r\n                }}\r\n                className=\"px-4\" >\r\n                  <div className=\"mb-4 mt-4 flex justify-center items-center\">\r\n                      <input\r\n                        id=\"fileDescription\"\r\n                        type=\"text\"\r\n                        ref={(input) => { this.fileDescription = input }}\r\n                        className=\"shadow appearance-none border rounded py-2 px-3 text-gray-700 leading-tight w-96 focus:outline-none focus:shadow-outline\"\r\n                        placeholder=\"description...\"\r\n                        autoComplete=\"off\"\r\n                        required />\r\n                  </div>\r\n                  <div className=\"mt-4\">\r\n                    <input className=\"ml-4\" type=\"file\" onChange={this.props.captureFile} />\r\n                    <button type=\"submit\" className=\"bg-transparent hover:bg-blue-500 text-blue-700 hover:text-white py-2 px-4 border border-blue-500 hover:border-transparent rounded\"><b>Upload!</b></button>\r\n                  </div>\r\n              </form>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n\r\n     </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Main;\r\n\r\n\r\n\r\n\r\n\r\n\r\n{/* <div className=\"container-fluid mt-5 text-center\">\r\n        <div className=\"row\">\r\n          <main role=\"main\" className=\"col-lg-12 ml-auto mr-auto\" style={{ maxWidth: '1024px' }}>\r\n            <div className=\"content\">\r\n              <p>&nbsp;</p>\r\n             \r\n              <div className=\"card mb-3 mx-auto bg-dark\" style={{ maxWidth: '512px' }}>\r\n                <h2 className=\"text-white text-monospace bg-dark\"><b><ins>Share File</ins></b></h2>\r\n                  <form onSubmit={(event) => {\r\n                    event.preventDefault()\r\n                    const description = this.fileDescription.value\r\n                    this.props.uploadFile(description)\r\n                  }} >\r\n                      <div className=\"form-group\">\r\n                        <br></br>\r\n                          <input\r\n                            id=\"fileDescription\"\r\n                            type=\"text\"\r\n                            ref={(input) => { this.fileDescription = input }}\r\n                            className=\"form-control text-monospace\"\r\n                            placeholder=\"description...\"\r\n                            required />\r\n                      </div>\r\n                    <input type=\"file\" onChange={this.props.captureFile} className=\"text-white text-monospace\"/>\r\n                    <button type=\"submit\" className=\"btn-primary btn-block\"><b>Upload!</b></button>\r\n                  </form>\r\n              </div>\r\n\r\n              <p>&nbsp;</p>\r\n\r\n              \r\n\r\n            </div>\r\n          </main>\r\n        </div>\r\n      </div> */}","import React, { Component } from 'react'\r\nimport { convertBytes } from './helpers';\r\nimport moment from 'moment'\r\n\r\nclass Table extends Component {\r\n    render() {\r\n        console.log(this.props.files);\r\n        return (\r\n        <div className=\"flex flex-col mx-12 my-8\">\r\n        <div className=\"-my-2 overflow-x-auto sm:-mx-6 lg:-mx-8\">\r\n            <div className=\"py-2 align-middle inline-block min-w-full sm:px-6 lg:px-8\">\r\n            <div className=\"shadow overflow-hidden border-b border-gray-200 sm:rounded-lg\">\r\n                <table className=\"min-w-full divide-y divide-gray-200\">\r\n                <thead className=\"bg-gray-50\">\r\n                    <tr>\r\n                    <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                        id\r\n                    </th>\r\n                    <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                        name\r\n                    </th>\r\n                    <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                        description\r\n                    </th>\r\n                    <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                        type\r\n                    </th>\r\n                    <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                        size\r\n                    </th>\r\n                    <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                        date\r\n                    </th>\r\n                    <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                        uploader/view\r\n                    </th>\r\n                    <th scope=\"col\" className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\r\n                        hash/view/get\r\n                    </th>\r\n                    </tr>\r\n                </thead>\r\n                {\r\n                    this.props.files.map((file, key) => {\r\n                        return(\r\n                            <tbody className=\"bg-white divide-y divide-gray-200\" key={key}>\r\n                                <tr>\r\n                                <td className=\"px-6 py-4 whitespace-nowrap\">\r\n                                    <div className=\"flex items-center\">\r\n                                        <div className=\"text-sm font-medium text-gray-900\">\r\n                                        {file.fileId}\r\n                                        </div>\r\n                                    </div>\r\n                                </td>\r\n                                <td className=\"px-6 py-4 whitespace-nowrap\">\r\n                                    <div className=\"text-sm text-gray-900\">{file.fileName}</div>\r\n                                </td>\r\n                                <td className=\"px-6 py-4 whitespace-nowrap\">\r\n                                    <div className=\"text-sm text-gray-900\">{file.fileDescription}</div>\r\n                                </td>\r\n                                <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\r\n                                {file.fileType}\r\n                                </td>\r\n                                <td className=\"px-6 py-4 whitespace-nowrap\">\r\n                                    <span className=\"px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800\">\r\n                                    {convertBytes(file.fileSize)}\r\n                                    </span>\r\n                                </td>\r\n                                <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\r\n                                {moment.unix(file.uploadTime).format('h:mm:ss A M/D/Y')}\r\n                                </td>\r\n                                <td className=\"px-6 py-4 whitespace-nowrap text-left text-sm font-medium\">\r\n                                    <a \r\n                                        href={\"https://etherscan.io/address/\" + file.uploader} \r\n                                        className=\"text-indigo-600 hover:text-indigo-900\"\r\n                                        rel=\"noopener noreferrer\" target=\"_blank\">\r\n                                        {file.uploader.substring(0,15)}...\r\n                                    </a>\r\n                                </td>\r\n                                <td className=\"px-6 py-4 whitespace-nowrap text-left text-sm font-medium\">\r\n                                    <a  href={\"https://ipfs.infura.io/ipfs/\" + file.fileHash}\r\n                                        className=\"text-indigo-600 hover:text-indigo-900\"\r\n                                        rel=\"noopener noreferrer\"\r\n                                        target=\"_blank\">\r\n                                        {file.fileHash.substring(0,15)}...\r\n                                    </a>\r\n                                </td>\r\n                                </tr>\r\n                            </tbody>\r\n                        )\r\n                    })\r\n                }\r\n                </table>\r\n            </div>\r\n            </div>\r\n        </div>\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Table\r\n\r\n\r\n\r\n\r\n{/* <table className=\"table-sm table-bordered text-monospace\" style={{ width: '1000px', maxHeight: '450px'}}>\r\n                <thead style={{ 'fontSize': '15px' }}>\r\n                  <tr className=\"bg-dark text-white\">\r\n                    <th scope=\"col\" style={{ width: '10px'}}>id</th>\r\n                    <th scope=\"col\" style={{ width: '200px'}}>name</th>\r\n                    <th scope=\"col\" style={{ width: '230px'}}>description</th>\r\n                    <th scope=\"col\" style={{ width: '120px'}}>type</th>\r\n                    <th scope=\"col\" style={{ width: '90px'}}>size</th>\r\n                    <th scope=\"col\" style={{ width: '90px'}}>date</th>\r\n                    <th scope=\"col\" style={{ width: '120px'}}>uploader/view</th>\r\n                    <th scope=\"col\" style={{ width: '120px'}}>hash/view/get</th>\r\n                  </tr>\r\n                </thead>\r\n                { this.props.files.map((file, key) => {\r\n                  return(\r\n                    <thead style={{ 'fontSize': '12px' }} key={key}>\r\n                      <tr>\r\n                        <td>{file.fileId}</td>\r\n                        <td>{file.fileName}</td>\r\n                        <td>{file.fileDescription}</td>\r\n                        <td>{file.fileType}</td>\r\n                        <td>{convertBytes(file.fileSize)}</td>\r\n                        <td>{moment.unix(file.uploadTime).format('h:mm:ss A M/D/Y')}</td>\r\n                        <td>\r\n                          <a\r\n                            href={\"https://etherscan.io/address/\" + file.uploader}\r\n                            rel=\"noopener noreferrer\"\r\n                            target=\"_blank\">\r\n                            {file.uploader.substring(0,10)}...\r\n                          </a>\r\n                         </td>\r\n                        <td>\r\n                          <a\r\n                            href={\"https://ipfs.infura.io/ipfs/\" + file.fileHash}\r\n                            rel=\"noopener noreferrer\"\r\n                            target=\"_blank\">\r\n                            {file.fileHash.substring(0,10)}...\r\n                          </a>\r\n                        </td>\r\n                      </tr>\r\n                    </thead>\r\n                  )\r\n                })}\r\n              </table> */}","export function convertBytes(bytes) {\r\n   var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\r\n   if (bytes === 0) return '0 Byte';\r\n   var i = parseInt(Math.floor(Math.log(bytes) / Math.log(1024)));\r\n   return Math.round(bytes / Math.pow(1024, i), 2) + ' ' + sizes[i];\r\n}"],"sourceRoot":""}